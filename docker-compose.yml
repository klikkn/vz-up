version: '3'
services:

  nginx-proxy:
    image: jwilder/nginx-proxy
    restart: always
    ports:
      - "80:80"
    volumes:
    - /var/run/docker.sock:/tmp/docker.sock:ro

  web:
    build:
      context: ./web
    restart: always
    command: "${WEB_START_COMMAND}"
    expose:
      - "${WEB_EXPOSE_PORT}"
    environment:
      - VIRTUAL_HOST=${WEB_HOST}
      - VIRTUAL_PORT=${WEB_EXPOSE_PORT}
      - NODE_ENV
      - AUTH_HOST
      - API_HOST
    volumes:
      - ./web/:/opt/app
      - /opt/app/node_modules

  auth:
    build:
      context: ./auth
    restart: always
    command: sh -c '/usr/bin/wait-for.sh auth_db:${AUTH_DB_EXPOSE_PORT} -- ${AUTH_START_COMMAND}'
    expose:
      - "${AUTH_EXPOSE_PORT}"
    environment:
      - VIRTUAL_HOST=${AUTH_HOST}
      - VIRTUAL_PORT=${AUTH_EXPOSE_PORT}
      - DB_HOST=mongodb://auth_db/auth
      - NODE_ENV
      - JWT_SECRET
      - AUTH_ROOT_USER_EMAIL
      - AUTH_ROOT_USER_PASSWORD
    volumes:
      - ./auth/:/opt/app
      - /opt/app/node_modules

  auth_db:
    image: "mongo"
    volumes:
      - ./.volumes/auth_db/:/data/db
    expose:
      - "${AUTH_DB_EXPOSE_PORT}"

  api:
    build:
      context: ./api
    restart: always
    command: sh -c '/usr/bin/wait-for.sh prisma:${PRISMA_EXPOSE_PORT} -- ${API_START_COMMAND}'
    expose:
      - "${API_EXPOSE_PORT}"
    environment:
      - VIRTUAL_HOST=${API_HOST}
      - VIRTUAL_PORT=${API_EXPOSE_PORT}
      - NODE_ENV
      - JWT_SECRET
      - PRISMA_SERVICE_NAME=prisma
      - PRISMA_HOST=http://prisma
      - PRISMA_EXPOSE_PORT
      - PRISMA_SECRET
    volumes:
      - ./api/:/opt/app
      - /opt/app/node_modules

  prisma:
    image: prismagraphql/prisma:1.16
    restart: always
    expose:
      - "${PRISMA_EXPOSE_PORT}"
    environment:
      PRISMA_CONFIG: |
        port: ${PRISMA_EXPOSE_PORT}
        databases:
          default:
            connector: postgres
            host: api_db
            port: ${API_DB_EXPOSE_PORT}
            user: ${POSTGRES_USER}
            password: ${POSTGRES_PASSWORD}
            migrations: true,
            managementApiSecret: ${PRISMA_SECRET}

  api_db:
    image: postgres
    restart: always
    volumes:
      - ./.volumes/api_db:/var/lib/postgresql/data
    restart: always
    expose:
      - "${API_DB_EXPOSE_PORT}"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
